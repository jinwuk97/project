# 마스터 노드에서 Nginx 배포 및 LoadBalancer 서비스를 구성하는 플레이북
- name: Configure Nginx Deployment and LoadBalancer Service on Master
  hosts: master    # 'master' 그룹에 속한 호스트들을 대상으로 함
  become: yes      # 관리자 권한으로 실행

  tasks:
    # Nginx 배포를 위한 Deployment YAML 파일 생성
    - name: Create Nginx Deployment YAML
      copy:
        dest: /root/nginx-deployment.yaml  # 파일이 저장될 경로
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deployment
            namespace: project
          spec:
            replicas: 3  #
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                - name: nginx
                  image: jiruk/project:latest  # 사용할 Docker 이미지
                  ports:
                  - containerPort: 80  # 컨테이너 내부 포트

    # Nginx Deployment을 클러스터에 적용
    - name: Apply Nginx Deployment
      command: kubectl apply -f /root/nginx-deployment.yaml -n project
      register: deploy_output  # 명령 실행 결과를 변수에 저장

    # Deployment 적용 결과 출력
    - name: Show Deployment output
      debug:
        var: deploy_output.stdout_lines  # 저장된 결과 출력

    # MetalLB를 위한 Nginx LoadBalancer 서비스 YAML 파일 생성
    - name: Create Nginx LoadBalancer service YAML for MetalLB
      copy:
        dest: /root/nginx-service.yaml  # 파일이 저장될 경로
        content: |
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
            namespace: project 
          spec:
            selector:
              app: nginx
            type: LoadBalancer  # 서비스 타입을 LoadBalancer로 설정
            ports:
              - protocol: TCP
                port: 80          # 외부에 노출할 포트
                targetPort: 80    # Pod 내 컨테이너 포트

    # LoadBalancer 서비스를 클러스터에 적용
    - name: Apply Nginx LoadBalancer Service
      command: kubectl apply -f /root/nginx-service.yaml -n project
      register: lb_output  # 명령 실행 결과를 변수에 저장

    # LoadBalancer 서비스 적용 결과 출력
    - name: Show LoadBalancer service output
      debug:
        var: lb_output.stdout_lines  # 저장된 결과 출력

    # LoadBalancer가 준비될 때까지 대기
    - name: Wait for LoadBalancer to be ready
      command: kubectl get svc nginx-service -n project
      register: svc_check  # 명령 실행 결과를 변수에 저장
      retries: 5           # 최대 재시도 횟수
      delay: 10            # 재시도 간 대기 시간 (초)
      until: "svc_check.stdout.find('EXTERNAL-IP') != -1"  # EXTERNAL-IP가 할당될 때까지 반복
      ignore_errors: yes   # 오류가 발생해도 계속 진행
